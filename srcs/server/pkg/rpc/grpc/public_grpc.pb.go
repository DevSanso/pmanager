// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: public.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	request "pkg/message/request"
	response "pkg/message/response"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PublicServiceClient is the client API for PublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicServiceClient interface {
	GetHardwareResource(ctx context.Context, in *request.GetHardwareResourceRequest, opts ...grpc.CallOption) (*response.GetHardwareResourceResponse, error)
	GetInfoResource(ctx context.Context, in *request.GetInfoResourceRequest, opts ...grpc.CallOption) (*response.GetInfoResourceResponse, error)
	GetModuleList(ctx context.Context, in *request.GetModuleListRequest, opts ...grpc.CallOption) (*response.GetModuleListResponse, error)
	GetUsingHardwareResourceByProcess(ctx context.Context, in *request.GetUsingHardwareResourceByProcessRequest, opts ...grpc.CallOption) (*response.GetUsingHardwareResourceByProcessResponse, error)
	GetUsingInfoResouceByProcess(ctx context.Context, in *request.GetUsingInfoResourceByProcessRequest, opts ...grpc.CallOption) (*response.GetUsingInfoResourceByProcessResponse, error)
	GetManagerLog(ctx context.Context, in *request.GetManagerLogRequest, opts ...grpc.CallOption) (*response.GetManagerLogResponse, error)
	GetModuleLog(ctx context.Context, in *request.GetModuleLogRequest, opts ...grpc.CallOption) (*response.GetModuleLogResponse, error)
	GetGroupId(ctx context.Context, in *request.GetGroupIdRequest, opts ...grpc.CallOption) (*response.GetGroupIdResponse, error)
	GetServiceName(ctx context.Context, in *request.GetServiceNameRequest, opts ...grpc.CallOption) (*response.GetServiceNameResponse, error)
}

type publicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicServiceClient(cc grpc.ClientConnInterface) PublicServiceClient {
	return &publicServiceClient{cc}
}

func (c *publicServiceClient) GetHardwareResource(ctx context.Context, in *request.GetHardwareResourceRequest, opts ...grpc.CallOption) (*response.GetHardwareResourceResponse, error) {
	out := new(response.GetHardwareResourceResponse)
	err := c.cc.Invoke(ctx, "/grpc.PublicService/GetHardwareResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetInfoResource(ctx context.Context, in *request.GetInfoResourceRequest, opts ...grpc.CallOption) (*response.GetInfoResourceResponse, error) {
	out := new(response.GetInfoResourceResponse)
	err := c.cc.Invoke(ctx, "/grpc.PublicService/GetInfoResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetModuleList(ctx context.Context, in *request.GetModuleListRequest, opts ...grpc.CallOption) (*response.GetModuleListResponse, error) {
	out := new(response.GetModuleListResponse)
	err := c.cc.Invoke(ctx, "/grpc.PublicService/GetModuleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetUsingHardwareResourceByProcess(ctx context.Context, in *request.GetUsingHardwareResourceByProcessRequest, opts ...grpc.CallOption) (*response.GetUsingHardwareResourceByProcessResponse, error) {
	out := new(response.GetUsingHardwareResourceByProcessResponse)
	err := c.cc.Invoke(ctx, "/grpc.PublicService/GetUsingHardwareResource_by_process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetUsingInfoResouceByProcess(ctx context.Context, in *request.GetUsingInfoResourceByProcessRequest, opts ...grpc.CallOption) (*response.GetUsingInfoResourceByProcessResponse, error) {
	out := new(response.GetUsingInfoResourceByProcessResponse)
	err := c.cc.Invoke(ctx, "/grpc.PublicService/GetUsingInfoResouce_by_process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetManagerLog(ctx context.Context, in *request.GetManagerLogRequest, opts ...grpc.CallOption) (*response.GetManagerLogResponse, error) {
	out := new(response.GetManagerLogResponse)
	err := c.cc.Invoke(ctx, "/grpc.PublicService/GetManagerLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetModuleLog(ctx context.Context, in *request.GetModuleLogRequest, opts ...grpc.CallOption) (*response.GetModuleLogResponse, error) {
	out := new(response.GetModuleLogResponse)
	err := c.cc.Invoke(ctx, "/grpc.PublicService/GetModuleLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetGroupId(ctx context.Context, in *request.GetGroupIdRequest, opts ...grpc.CallOption) (*response.GetGroupIdResponse, error) {
	out := new(response.GetGroupIdResponse)
	err := c.cc.Invoke(ctx, "/grpc.PublicService/GetGroupId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetServiceName(ctx context.Context, in *request.GetServiceNameRequest, opts ...grpc.CallOption) (*response.GetServiceNameResponse, error) {
	out := new(response.GetServiceNameResponse)
	err := c.cc.Invoke(ctx, "/grpc.PublicService/GetServiceName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicServiceServer is the server API for PublicService service.
// All implementations must embed UnimplementedPublicServiceServer
// for forward compatibility
type PublicServiceServer interface {
	GetHardwareResource(context.Context, *request.GetHardwareResourceRequest) (*response.GetHardwareResourceResponse, error)
	GetInfoResource(context.Context, *request.GetInfoResourceRequest) (*response.GetInfoResourceResponse, error)
	GetModuleList(context.Context, *request.GetModuleListRequest) (*response.GetModuleListResponse, error)
	GetUsingHardwareResourceByProcess(context.Context, *request.GetUsingHardwareResourceByProcessRequest) (*response.GetUsingHardwareResourceByProcessResponse, error)
	GetUsingInfoResouceByProcess(context.Context, *request.GetUsingInfoResourceByProcessRequest) (*response.GetUsingInfoResourceByProcessResponse, error)
	GetManagerLog(context.Context, *request.GetManagerLogRequest) (*response.GetManagerLogResponse, error)
	GetModuleLog(context.Context, *request.GetModuleLogRequest) (*response.GetModuleLogResponse, error)
	GetGroupId(context.Context, *request.GetGroupIdRequest) (*response.GetGroupIdResponse, error)
	GetServiceName(context.Context, *request.GetServiceNameRequest) (*response.GetServiceNameResponse, error)
	mustEmbedUnimplementedPublicServiceServer()
}

// UnimplementedPublicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPublicServiceServer struct {
}

func (UnimplementedPublicServiceServer) GetHardwareResource(context.Context, *request.GetHardwareResourceRequest) (*response.GetHardwareResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHardwareResource not implemented")
}
func (UnimplementedPublicServiceServer) GetInfoResource(context.Context, *request.GetInfoResourceRequest) (*response.GetInfoResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoResource not implemented")
}
func (UnimplementedPublicServiceServer) GetModuleList(context.Context, *request.GetModuleListRequest) (*response.GetModuleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModuleList not implemented")
}
func (UnimplementedPublicServiceServer) GetUsingHardwareResourceByProcess(context.Context, *request.GetUsingHardwareResourceByProcessRequest) (*response.GetUsingHardwareResourceByProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsingHardwareResourceByProcess not implemented")
}
func (UnimplementedPublicServiceServer) GetUsingInfoResouceByProcess(context.Context, *request.GetUsingInfoResourceByProcessRequest) (*response.GetUsingInfoResourceByProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsingInfoResouceByProcess not implemented")
}
func (UnimplementedPublicServiceServer) GetManagerLog(context.Context, *request.GetManagerLogRequest) (*response.GetManagerLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManagerLog not implemented")
}
func (UnimplementedPublicServiceServer) GetModuleLog(context.Context, *request.GetModuleLogRequest) (*response.GetModuleLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModuleLog not implemented")
}
func (UnimplementedPublicServiceServer) GetGroupId(context.Context, *request.GetGroupIdRequest) (*response.GetGroupIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupId not implemented")
}
func (UnimplementedPublicServiceServer) GetServiceName(context.Context, *request.GetServiceNameRequest) (*response.GetServiceNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceName not implemented")
}
func (UnimplementedPublicServiceServer) mustEmbedUnimplementedPublicServiceServer() {}

// UnsafePublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicServiceServer will
// result in compilation errors.
type UnsafePublicServiceServer interface {
	mustEmbedUnimplementedPublicServiceServer()
}

func RegisterPublicServiceServer(s grpc.ServiceRegistrar, srv PublicServiceServer) {
	s.RegisterService(&PublicService_ServiceDesc, srv)
}

func _PublicService_GetHardwareResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetHardwareResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetHardwareResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PublicService/GetHardwareResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetHardwareResource(ctx, req.(*request.GetHardwareResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetInfoResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetInfoResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetInfoResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PublicService/GetInfoResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetInfoResource(ctx, req.(*request.GetInfoResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetModuleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetModuleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetModuleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PublicService/GetModuleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetModuleList(ctx, req.(*request.GetModuleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetUsingHardwareResourceByProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetUsingHardwareResourceByProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetUsingHardwareResourceByProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PublicService/GetUsingHardwareResource_by_process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetUsingHardwareResourceByProcess(ctx, req.(*request.GetUsingHardwareResourceByProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetUsingInfoResouceByProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetUsingInfoResourceByProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetUsingInfoResouceByProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PublicService/GetUsingInfoResouce_by_process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetUsingInfoResouceByProcess(ctx, req.(*request.GetUsingInfoResourceByProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetManagerLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetManagerLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetManagerLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PublicService/GetManagerLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetManagerLog(ctx, req.(*request.GetManagerLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetModuleLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetModuleLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetModuleLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PublicService/GetModuleLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetModuleLog(ctx, req.(*request.GetModuleLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetGroupIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PublicService/GetGroupId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetGroupId(ctx, req.(*request.GetGroupIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetServiceName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetServiceNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetServiceName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.PublicService/GetServiceName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetServiceName(ctx, req.(*request.GetServiceNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicService_ServiceDesc is the grpc.ServiceDesc for PublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.PublicService",
	HandlerType: (*PublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHardwareResource",
			Handler:    _PublicService_GetHardwareResource_Handler,
		},
		{
			MethodName: "GetInfoResource",
			Handler:    _PublicService_GetInfoResource_Handler,
		},
		{
			MethodName: "GetModuleList",
			Handler:    _PublicService_GetModuleList_Handler,
		},
		{
			MethodName: "GetUsingHardwareResource_by_process",
			Handler:    _PublicService_GetUsingHardwareResourceByProcess_Handler,
		},
		{
			MethodName: "GetUsingInfoResouce_by_process",
			Handler:    _PublicService_GetUsingInfoResouceByProcess_Handler,
		},
		{
			MethodName: "GetManagerLog",
			Handler:    _PublicService_GetManagerLog_Handler,
		},
		{
			MethodName: "GetModuleLog",
			Handler:    _PublicService_GetModuleLog_Handler,
		},
		{
			MethodName: "GetGroupId",
			Handler:    _PublicService_GetGroupId_Handler,
		},
		{
			MethodName: "GetServiceName",
			Handler:    _PublicService_GetServiceName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public.proto",
}
