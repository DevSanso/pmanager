syntax = "proto3";

package grpc_service;

option go_package = "grpc_service";

import "message/request/reset_manager_client_request.proto";
import "message/request/switch_server_onoff_request.proto";
import "message/request/set_public_access_info_request.proto";
import "message/request/set_module_reboot_cond_request.proto";
import "message/request/set_server_group_request.proto";
import "message/request/set_service_request.proto";
import "message/request/init_server_request.proto";

import "message/response/reset_manager_client_response.proto";
import "message/response/switch_server_onoff_response.proto";
import "message/response/set_public_access_info_response.proto";
import "message/response/set_module_reboot_cond_response.proto";
import "message/response/set_server_group_response.proto";
import "message/response/set_service_response.proto";
import "message/response/init_server_response.proto";

service PrivateService {
	rpc reset_manager_client(request.ResetManagerClientRequest) returns (response.ResetManagerClientResponse) {}
	rpc switch_server_onoff(request.SwitchServerOnOffRequest) returns (response.SwitchServerOnOffResponse) {}
	rpc set_public_access_info(request.SetPublicAccessInfoRequest) returns (response.SetPublicAccessInfoResponse) {}
	rpc set_module_reboot_cond(request.SetModuleRebootCondRequest) returns (response.SetModuleRebootCondResponse) {}
	rpc set_server_group(request.SetServerGroupRequest) returns (response.SetServerGroupResponse) {}
	rpc set_service(request.SetServiceRequest) returns (response.SetServiceResponse) {}
	rpc init_server(request.InitServerRequest) returns (response.InitServerResponse) {}
}
