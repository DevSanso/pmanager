syntax = "proto3";

package grpc;

option go_package = "pkg/rpc/grpc";

import "message/request/reset_manager_client_request.proto";
import "message/request/switch_server_onoff_request.proto";
import "message/request/set_public_access_info_request.proto";
import "message/request/set_module_reboot_cond_request.proto";
import "message/request/set_server_group_request.proto";
import "message/request/set_service_request.proto";
import "message/request/init_server_request.proto";
import "message/request/push_module_request.proto";
import "message/request/pop_module_request.proto";

import "message/response/reset_manager_client_response.proto";
import "message/response/switch_server_onoff_response.proto";
import "message/response/set_public_access_info_response.proto";
import "message/response/set_module_reboot_cond_response.proto";
import "message/response/set_server_group_response.proto";
import "message/response/set_service_response.proto";
import "message/response/init_server_response.proto";
import "message/response/push_module_response.proto";
import "message/response/pop_module_response.proto";

service PrivateService {
	rpc ResetManagerClient(request.ResetManagerClientRequest) returns (response.ResetManagerClientResponse) {}
	rpc SwitchServerOnoff(request.SwitchServerOnOffRequest) returns (response.SwitchServerOnOffResponse) {}
	rpc SetPublicAccessInfo(request.SetPublicAccessInfoRequest) returns (response.SetPublicAccessInfoResponse) {}
	rpc SetModuleRebootCond(request.SetModuleRebootCondRequest) returns (response.SetModuleRebootCondResponse) {}
	rpc SetServerGroup(request.SetServerGroupRequest) returns (response.SetServerGroupResponse) {}
	rpc SetService(request.SetServiceRequest) returns (response.SetServiceResponse) {}
	rpc InitServer(request.InitServerRequest) returns (response.InitServerResponse) {}
	rpc PushModule(request.PushModuleRequest) returns (response.PushModuleResponse) {}
	rpc PopModule(request.PopModuleRequest) returns (response.PopModuleResponse) {}
}
